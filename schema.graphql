"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Bank {
  account: String!
  bank: String!
  createdAt: Float!
  id: ID!
  name: String!
  updatedAt: Float!
  user: User!
}

input CreateLanguageInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input GetUsersFilter {
  email: String
  exclude: [ID!] = []
  limit: Int!
  name: String
  offset: Int!

  """Sắp xếp của bình luận"""
  sort: String!
}

type Identity {
  avatar: String!
  back: String!
  createdAt: Float!
  front: String!
  id: ID!
  updatedAt: Float!
  user: User!
}

type Info {
  address: String!
  born: [Float!]!
  cccd: String!
  createdAt: Float!
  education: String!
  id: ID!
  income: String!
  job: String!
  marriage: String!
  name: String!
  purpose: String!
  updatedAt: Float!
  user: User!
}

type Language {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Mutation {
  createLanguage(createLanguageInput: CreateLanguageInput!): Language!
  removeLanguage(id: Int!): Language!
  updateBank(input: UpdateBankInput!): Bank!
  updateIdentity(input: UpdateIdentityInput!): Identity!
  updateInfo(input: UpdateInfoInput!): Info!
  updateLanguage(updateLanguageInput: UpdateLanguageInput!): Language!
}

type Notify {
  """Thông báo lỗi hay không"""
  error: Boolean!

  """Nội dung tin nhắn"""
  msg: String!

  """Thành viên hiện tại"""
  user: User!
}

type Query {
  language(id: Int!): Language!
  me: User!
  users(filter: GetUsersFilter!): [User!]!
}

type Subscription {
  """Nhận thông báo"""
  subNotify: Notify!
}

input UpdateBankInput {
  account: String!
  bank: String!
  name: String!
}

input UpdateIdentityInput {
  avatar: String!
  back: String!
  front: String!
}

input UpdateInfoInput {
  address: String!
  born: [Float!]!
  cccd: String!
  education: String!
  income: String!
  job: String!
  marriage: String!
  name: String!
  purpose: String!
}

input UpdateLanguageInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

type User {
  avatar: String
  createdAt: Float!
  email: String
  id: ID!
  name: String!
  role: UserRole!
  slug: String!

  """Firebase ID"""
  uid: String!
}

enum UserRole {
  ADMIN
  SP_ADMIN
  USER
}
